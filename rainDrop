public class RainDropProblem{
	static double min = 0;
	static double max = 0;
	static double[][] rainDrops = new double[][] {{0, 0.1}, {0.05, 0.06}, {0.08, 0.2}, {0.1, 0.9}, {0.2, 0.3}, {0.8, 1}};
	public static void main(String[] args) {
		test(rainDrops);
	}
	public static void test(double[][] rainDrops) {
		int res = allWet(rainDrops);
		System.out.print(res);;
	}
	
	public static int allWet(double[][] rainDrops) {
		// the linked list is to store wet areas without overlap;
		List<double[]> wets = new LinkedList<>();
		for (int i = 0; i < rainDrops.length; i ++) {
			insert(wets, rainDrops[i]); // binary search;
			if (wets.size() == 1 && min == 0.0 && max == 1.0)
				return i;
		}
		return -1;
	}
	
	private static void insert(List<double[]> wets, double[] rainDrop) {
		int start = 0, end = wets.size() - 1;
		while (start <= end) {
			int mid = start + (end - start) / 2;
			if (rainDrop[0] > wets.get(mid)[0]) start = mid + 1;
			else if (rainDrop[0] < wets.get(mid)[0]) end = mid - 1;
		}
		wets.add(start, rainDrop);
		if (start > 0 && wets.get(start)[0] <= wets.get(start - 1)[1]){
			wets.set(start - 1, new double[] {wets.get(start - 1)[0], Math.max(wets.get(start - 1)[1], wets.get(start)[1])});
			wets.remove(start);
		}
			
		if (start < wets.size() - 1 && wets.get(start)[1] >= wets.get(start + 1)[0]){
			wets.set(start + 1, new double[] {wets.get(start)[0], Math.max(wets.get(start)[1], wets.get(start + 1)[1])});
			wets.remove(start + 1);
		}
		min = wets.get(0)[0];
		max = wets.get(wets.size() - 1)[1];
	}
}
